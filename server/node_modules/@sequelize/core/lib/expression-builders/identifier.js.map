{
  "version": 3,
  "sources": ["../../src/expression-builders/identifier.ts"],
  "sourcesContent": ["import type { TableOrModel } from '../abstract-dialect/query-generator.types';\nimport { BaseSqlExpression, SQL_IDENTIFIER } from './base-sql-expression.js';\n\n/**\n * Use {@link sql.identifier} instead.\n */\nexport class Identifier extends BaseSqlExpression {\n  declare protected readonly [SQL_IDENTIFIER]: 'identifier';\n\n  constructor(readonly values: Array<string | TableOrModel>) {\n    super();\n  }\n}\n\n/**\n * Used to represent a value that will either be escaped to a literal, or a bind parameter.\n * Unlike {@link sql.attribute} and {@link sql.col}, this identifier will be escaped as-is,\n * without mapping to a column name or any other transformation.\n *\n * This method supports strings, table structures, model classes (in which case the identifiers will be the model schema & table name), and model definitions (same behavior as model classes)\n *\n * @param values The identifiers to escape. Automatically joins them with a period (`.`).\n * @example\n * ```ts\n * sequelize.query(sql`SELECT * FROM users WHERE ${identifier('firstName')} = 'John'`);\n * ```\n *\n * Will generate (identifier quoting depending on the dialect):\n *\n * ```sql\n * SELECT * FROM users WHERE \"firstName\" = 'John'\n * ```\n */\nexport function identifier(...values: Array<string | TableOrModel>): Identifier {\n  return new Identifier(values);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,iCAAkD;AAK3C,MAAM,mBAAmB,6CAAkB;AAAA,EAGhD,YAAqB,QAAsC;AACzD,UAAM;AADa;AAAA,EAErB;AACF;AAqBO,SAAS,cAAc,QAAkD;AAC9E,SAAO,IAAI,WAAW,MAAM;AAC9B;",
  "names": []
}
