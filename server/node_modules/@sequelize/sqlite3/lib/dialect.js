"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var dialect_exports = {};
__export(dialect_exports, {
  SqliteDialect: () => SqliteDialect
});
module.exports = __toCommonJS(dialect_exports);
var import_core = require("@sequelize/core");
var import_sql = require("@sequelize/core/_non-semver-use-at-your-own-risk_/utils/sql.js");
var import_utils = require("@sequelize/utils");
var DataTypes = __toESM(require("./_internal/data-types-overrides.js"));
var import_connection_manager = require("./connection-manager.js");
var import_query_generator = require("./query-generator.js");
var import_query_interface = require("./query-interface.js");
var import_query = require("./query.js");
const DIALECT_OPTION_NAMES = (0, import_utils.getSynchronizedTypeKeys)({
  foreignKeys: void 0,
  sqlite3Module: void 0
});
const CONNECTION_OPTION_NAMES = (0, import_utils.getSynchronizedTypeKeys)({
  storage: void 0,
  password: void 0,
  mode: void 0
});
class SqliteDialect extends import_core.AbstractDialect {
  static supports = import_core.AbstractDialect.extendSupport({
    DEFAULT: false,
    "DEFAULT VALUES": true,
    "UNION ALL": false,
    "RIGHT JOIN": false,
    returnValues: "returning",
    inserts: {
      ignoreDuplicates: " OR IGNORE",
      updateOnDuplicate: " ON CONFLICT DO UPDATE SET",
      conflictFields: true,
      onConflictWhere: true
    },
    index: {
      using: false,
      where: true,
      functionBased: true
    },
    startTransaction: {
      useBegin: true,
      transactionType: true
    },
    constraints: {
      foreignKeyChecksDisableable: true,
      add: false,
      remove: false
    },
    groupedLimit: false,
    dataTypes: {
      CHAR: false,
      COLLATE_BINARY: true,
      CITEXT: true,
      DECIMAL: false,
      // sqlite3 doesn't give us a way to do sql type-based parsing, *and* returns bigints as js numbers.
      // issue: https://github.com/TryGhost/node-sqlite3/issues/922
      BIGINT: false,
      JSON: true
    },
    // TODO: add support for JSON operations https://www.sqlite.org/json1.html (bundled in sqlite3)
    //  be careful: json_extract, ->, and ->> don't have the exact same meanings as mysql & mariadb
    jsonOperations: false,
    jsonExtraction: {
      unquoted: false,
      quoted: false
    },
    truncate: {
      restartIdentity: false
    },
    delete: {
      limit: false
    }
  });
  Query = import_query.SqliteQuery;
  connectionManager;
  queryGenerator;
  queryInterface;
  constructor(sequelize, options) {
    super({
      identifierDelimiter: "`",
      options,
      dataTypeOverrides: DataTypes,
      sequelize,
      minimumDatabaseVersion: "3.8.0",
      dataTypesDocumentationUrl: "https://www.sqlite.org/datatype3.html",
      name: "sqlite3"
    });
    this.connectionManager = new import_connection_manager.SqliteConnectionManager(this);
    this.queryGenerator = new import_query_generator.SqliteQueryGenerator(this);
    this.queryInterface = new import_query_interface.SqliteQueryInterface(this);
  }
  parseConnectionUrl() {
    throw new Error(
      'The "url" option is not supported in SQLite. Please use the "storage" option instead.'
    );
  }
  createBindCollector() {
    return (0, import_sql.createNamedParamBindCollector)("$");
  }
  getDefaultSchema() {
    return "";
  }
  static getSupportedOptions() {
    return DIALECT_OPTION_NAMES;
  }
  static getSupportedConnectionOptions() {
    return CONNECTION_OPTION_NAMES;
  }
}
//# sourceMappingURL=dialect.js.map
