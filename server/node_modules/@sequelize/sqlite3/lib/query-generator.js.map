{
  "version": 3,
  "sources": ["../src/query-generator.js"],
  "sourcesContent": ["'use strict';\n\nimport {\n  ADD_COLUMN_QUERY_SUPPORTABLE_OPTIONS,\n  CREATE_TABLE_QUERY_SUPPORTABLE_OPTIONS,\n} from '@sequelize/core/_non-semver-use-at-your-own-risk_/abstract-dialect/query-generator.js';\nimport { rejectInvalidOptions } from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/check.js';\nimport { removeNullishValuesFromHash } from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/format.js';\nimport { EMPTY_SET } from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/object.js';\nimport { defaultValueSchemable } from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/query-builder-utils.js';\nimport defaults from 'lodash/defaults';\nimport each from 'lodash/each';\nimport isObject from 'lodash/isObject';\nimport { SqliteQueryGeneratorTypeScript } from './query-generator-typescript.internal.js';\n\nexport class SqliteQueryGenerator extends SqliteQueryGeneratorTypeScript {\n  createTableQuery(tableName, attributes, options) {\n    // TODO: add support for 'uniqueKeys' by improving the createTableQuery implementation so it also generates a CREATE UNIQUE INDEX query\n    if (options) {\n      rejectInvalidOptions(\n        'createTableQuery',\n        this.dialect,\n        CREATE_TABLE_QUERY_SUPPORTABLE_OPTIONS,\n        EMPTY_SET,\n        options,\n      );\n    }\n\n    options ||= {};\n\n    const primaryKeys = [];\n    const needsMultiplePrimaryKeys =\n      Object.values(attributes).filter(definition => definition.includes('PRIMARY KEY')).length > 1;\n    const attrArray = [];\n\n    for (const attr in attributes) {\n      if (Object.hasOwn(attributes, attr)) {\n        const dataType = attributes[attr];\n        const containsAutoIncrement = dataType.includes('AUTOINCREMENT');\n\n        let dataTypeString = dataType;\n        if (dataType.includes('PRIMARY KEY')) {\n          if (dataType.includes('INT')) {\n            // Only INTEGER is allowed for primary key, see https://github.com/sequelize/sequelize/issues/969 (no lenght, unsigned etc)\n            dataTypeString = containsAutoIncrement\n              ? 'INTEGER PRIMARY KEY AUTOINCREMENT'\n              : 'INTEGER PRIMARY KEY';\n\n            if (dataType.includes(' REFERENCES')) {\n              dataTypeString += dataType.slice(dataType.indexOf(' REFERENCES'));\n            }\n          }\n\n          if (needsMultiplePrimaryKeys) {\n            primaryKeys.push(attr);\n            if (dataType.includes('NOT NULL')) {\n              dataTypeString = dataType.replace(' PRIMARY KEY', '');\n            } else {\n              dataTypeString = dataType.replace('PRIMARY KEY', 'NOT NULL');\n            }\n          }\n        }\n\n        attrArray.push(`${this.quoteIdentifier(attr)} ${dataTypeString}`);\n      }\n    }\n\n    const table = this.quoteTable(tableName);\n    let attrStr = attrArray.join(', ');\n    const pkString = primaryKeys.map(pk => this.quoteIdentifier(pk)).join(', ');\n\n    // sqlite has a bug where using CONSTRAINT constraint_name UNIQUE during CREATE TABLE\n    //  does not respect the provided constraint name\n    //  and uses sqlite_autoindex_ as the name of the constraint instead.\n    //  CREATE UNIQUE INDEX does not have this issue, so we're using that instead\n    //\n    // if (options.uniqueKeys) {\n    //   each(options.uniqueKeys, (columns, indexName) => {\n    //     if (columns.customIndex) {\n    //       if (typeof indexName !== 'string') {\n    //         indexName = generateIndexName(tableName, columns);\n    //       }\n    //\n    //       attrStr += `, CONSTRAINT ${\n    //         this.quoteIdentifier(indexName)\n    //       } UNIQUE (${\n    //         columns.fields.map(field => this.quoteIdentifier(field)).join(', ')\n    //       })`;\n    //     }\n    //   });\n    // }\n\n    if (pkString.length > 0) {\n      attrStr += `, PRIMARY KEY (${pkString})`;\n    }\n\n    const sql = `CREATE TABLE IF NOT EXISTS ${table} (${attrStr});`;\n\n    return this.replaceBooleanDefaults(sql);\n  }\n\n  addColumnQuery(table, key, dataType, options) {\n    if (options) {\n      rejectInvalidOptions(\n        'addColumnQuery',\n        this.dialect,\n        ADD_COLUMN_QUERY_SUPPORTABLE_OPTIONS,\n        EMPTY_SET,\n        options,\n      );\n    }\n\n    const attributes = {};\n    attributes[key] = dataType;\n    const fields = this.attributesToSQL(attributes, { context: 'addColumn' });\n    const attribute = `${this.quoteIdentifier(key)} ${fields[key]}`;\n\n    const sql = `ALTER TABLE ${this.quoteTable(table)} ADD ${attribute};`;\n\n    return this.replaceBooleanDefaults(sql);\n  }\n\n  updateQuery(tableName, attrValueHash, where, options, attributes) {\n    options ||= {};\n    defaults(options, this.options);\n\n    attrValueHash = removeNullishValuesFromHash(attrValueHash, options.omitNull, options);\n\n    const modelAttributeMap = Object.create(null);\n    const values = [];\n    const bind = Object.create(null);\n    const bindParam = options.bindParam === undefined ? this.bindParam(bind) : options.bindParam;\n    let suffix = '';\n\n    if (options.returning) {\n      const returnValues = this.generateReturnValues(attributes, options);\n\n      suffix += returnValues.returningFragment;\n\n      // ensure that the return output is properly mapped to model fields.\n      options.mapToModel = true;\n    }\n\n    if (attributes) {\n      each(attributes, (attribute, key) => {\n        modelAttributeMap[key] = attribute;\n        if (attribute.field) {\n          modelAttributeMap[attribute.field] = attribute;\n        }\n      });\n    }\n\n    for (const key in attrValueHash) {\n      const value = attrValueHash[key] ?? null;\n\n      const escapedValue = this.escape(value, {\n        replacements: options.replacements,\n        bindParam,\n        type: modelAttributeMap[key]?.type,\n        // TODO: model,\n      });\n\n      values.push(`${this.quoteIdentifier(key)}=${escapedValue}`);\n    }\n\n    let query;\n    const whereOptions = { ...options, bindParam };\n\n    if (options.limit) {\n      query =\n        `UPDATE ${this.quoteTable(tableName)} SET ${values.join(',')} WHERE rowid IN (SELECT rowid FROM ${this.quoteTable(tableName)} ${this.whereQuery(where, whereOptions)} LIMIT ${this.escape(options.limit, undefined, options)})${suffix}`.trim();\n    } else {\n      query =\n        `UPDATE ${this.quoteTable(tableName)} SET ${values.join(',')} ${this.whereQuery(where, whereOptions)}${suffix}`.trim();\n    }\n\n    const result = { query };\n    if (options.bindParam !== false) {\n      result.bind = bind;\n    }\n\n    return result;\n  }\n\n  attributesToSQL(attributes, options) {\n    const result = {};\n    for (const name in attributes) {\n      const attribute = attributes[name];\n      const columnName = attribute.field || attribute.columnName || name;\n\n      if (isObject(attribute)) {\n        let sql = attribute.type.toString();\n\n        if (attribute.allowNull === false) {\n          sql += ' NOT NULL';\n        }\n\n        if (defaultValueSchemable(attribute.defaultValue, this.dialect)) {\n          // TODO thoroughly check that DataTypes.NOW will properly\n          // get populated on all databases as DEFAULT value\n          // i.e. mysql requires: DEFAULT CURRENT_TIMESTAMP\n          sql += ` DEFAULT ${this.escape(attribute.defaultValue, { ...options, type: attribute.type })}`;\n        }\n\n        if (attribute.unique === true) {\n          sql += ' UNIQUE';\n        }\n\n        if (attribute.primaryKey) {\n          sql += ' PRIMARY KEY';\n\n          if (attribute.autoIncrement) {\n            sql += ' AUTOINCREMENT';\n          }\n        }\n\n        if (attribute.references) {\n          const referencesTable = this.quoteTable(attribute.references.table);\n\n          let referencesKey;\n          if (attribute.references.key) {\n            referencesKey = this.quoteIdentifier(attribute.references.key);\n          } else {\n            referencesKey = this.quoteIdentifier('id');\n          }\n\n          sql += ` REFERENCES ${referencesTable} (${referencesKey})`;\n\n          if (attribute.onDelete) {\n            sql += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n          }\n\n          if (attribute.onUpdate) {\n            sql += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n          }\n        }\n\n        result[columnName] = sql;\n      } else {\n        result[columnName] = attribute;\n      }\n    }\n\n    return result;\n  }\n\n  replaceBooleanDefaults(sql) {\n    return sql\n      .replaceAll(/DEFAULT '?false'?/g, 'DEFAULT 0')\n      .replaceAll(/DEFAULT '?true'?/g, 'DEFAULT 1');\n  }\n}\n"],
  "mappings": "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",
  "names": ["defaults", "each", "isObject"]
}
