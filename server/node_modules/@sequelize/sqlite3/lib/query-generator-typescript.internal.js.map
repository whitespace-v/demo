{
  "version": 3,
  "sources": ["../src/query-generator-typescript.internal.ts"],
  "sourcesContent": ["import type {\n  BulkDeleteQueryOptions,\n  GetConstraintSnippetQueryOptions,\n  ListTablesQueryOptions,\n  RemoveColumnQueryOptions,\n  RemoveIndexQueryOptions,\n  ShowConstraintsQueryOptions,\n  StartTransactionQueryOptions,\n  TableOrModel,\n  TruncateTableQueryOptions,\n} from '@sequelize/core';\nimport { AbstractQueryGenerator, IsolationLevel } from '@sequelize/core';\nimport {\n  LIST_TABLES_QUERY_SUPPORTABLE_OPTIONS,\n  REMOVE_INDEX_QUERY_SUPPORTABLE_OPTIONS,\n  START_TRANSACTION_QUERY_SUPPORTABLE_OPTIONS,\n  TRUNCATE_TABLE_QUERY_SUPPORTABLE_OPTIONS,\n} from '@sequelize/core/_non-semver-use-at-your-own-risk_/abstract-dialect/query-generator-typescript.js';\nimport { rejectInvalidOptions } from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/check.js';\nimport { joinSQLFragments } from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/join-sql-fragments.js';\nimport { extractModelDefinition } from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/model-utils.js';\nimport { EMPTY_SET } from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/object.js';\nimport { generateIndexName } from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/string.js';\nimport { randomBytes } from 'node:crypto';\nimport type { SqliteDialect } from './dialect.js';\nimport { SqliteQueryGeneratorInternal } from './query-generator.internal.js';\nimport type { SqliteColumnsDescription } from './query-interface.types.js';\n\nconst REMOVE_INDEX_QUERY_SUPPORTED_OPTIONS = new Set<keyof RemoveIndexQueryOptions>(['ifExists']);\nconst TRUNCATE_TABLE_QUERY_SUPPORTED_OPTIONS = new Set<keyof TruncateTableQueryOptions>([\n  'restartIdentity',\n]);\n\n/**\n * Temporary class to ease the TypeScript migration\n */\nexport class SqliteQueryGeneratorTypeScript extends AbstractQueryGenerator {\n  readonly #internals: SqliteQueryGeneratorInternal;\n\n  constructor(\n    dialect: SqliteDialect,\n    internals: SqliteQueryGeneratorInternal = new SqliteQueryGeneratorInternal(dialect),\n  ) {\n    super(dialect, internals);\n\n    this.#internals = internals;\n  }\n\n  describeTableQuery(tableName: TableOrModel) {\n    return `PRAGMA TABLE_INFO(${this.quoteTable(tableName)})`;\n  }\n\n  describeCreateTableQuery(tableName: TableOrModel) {\n    return `SELECT sql FROM sqlite_master WHERE tbl_name = ${this.escapeTable(tableName)};`;\n  }\n\n  listTablesQuery(options?: ListTablesQueryOptions) {\n    if (options) {\n      rejectInvalidOptions(\n        'listTablesQuery',\n        this.dialect,\n        LIST_TABLES_QUERY_SUPPORTABLE_OPTIONS,\n        EMPTY_SET,\n        options,\n      );\n    }\n\n    return \"SELECT name AS `tableName` FROM sqlite_master WHERE type='table' AND name != 'sqlite_sequence'\";\n  }\n\n  truncateTableQuery(tableName: TableOrModel, options?: TruncateTableQueryOptions) {\n    if (options) {\n      rejectInvalidOptions(\n        'truncateTableQuery',\n        this.dialect,\n        TRUNCATE_TABLE_QUERY_SUPPORTABLE_OPTIONS,\n        TRUNCATE_TABLE_QUERY_SUPPORTED_OPTIONS,\n        options,\n      );\n    }\n\n    const sql = [`DELETE FROM ${this.quoteTable(tableName)}`];\n    if (options?.restartIdentity) {\n      sql.push(\n        `DELETE FROM ${this.quoteTable('sqlite_sequence')} WHERE ${this.quoteIdentifier('name')} = ${this.escapeTable(tableName)}`,\n      );\n    }\n\n    return sql;\n  }\n\n  showConstraintsQuery(tableName: TableOrModel, _options?: ShowConstraintsQueryOptions) {\n    return joinSQLFragments([\n      'SELECT sql FROM sqlite_master',\n      `WHERE tbl_name = ${this.escapeTable(tableName)}`,\n    ]);\n  }\n\n  showIndexesQuery(tableName: TableOrModel) {\n    return `PRAGMA INDEX_LIST(${this.quoteTable(tableName)})`;\n  }\n\n  getToggleForeignKeyChecksQuery(enable: boolean): string {\n    return `PRAGMA foreign_keys = ${enable ? 'ON' : 'OFF'}`;\n  }\n\n  renameColumnQuery(\n    _tableName: TableOrModel,\n    _attrNameBefore: string,\n    _attrNameAfter: string,\n    _attributes: SqliteColumnsDescription,\n  ): string {\n    throw new Error(`renameColumnQuery is not supported in ${this.dialect.name}.`);\n  }\n\n  removeColumnQuery(\n    _table: TableOrModel,\n    _columnName: string,\n    _options?: RemoveColumnQueryOptions,\n  ): string {\n    throw new Error(`removeColumnQuery is not supported in ${this.dialect.name}.`);\n  }\n\n  removeIndexQuery(\n    tableName: TableOrModel,\n    indexNameOrAttributes: string | string[],\n    options?: RemoveIndexQueryOptions,\n  ) {\n    if (options) {\n      rejectInvalidOptions(\n        'removeIndexQuery',\n        this.dialect,\n        REMOVE_INDEX_QUERY_SUPPORTABLE_OPTIONS,\n        REMOVE_INDEX_QUERY_SUPPORTED_OPTIONS,\n        options,\n      );\n    }\n\n    let indexName: string;\n    if (Array.isArray(indexNameOrAttributes)) {\n      const table = this.extractTableDetails(tableName);\n      indexName = generateIndexName(table, { fields: indexNameOrAttributes });\n    } else {\n      indexName = indexNameOrAttributes;\n    }\n\n    return joinSQLFragments([\n      'DROP INDEX',\n      options?.ifExists ? 'IF EXISTS' : '',\n      this.quoteIdentifier(indexName),\n    ]);\n  }\n\n  // SQLite does not support renaming columns. The following is a workaround.\n  _replaceColumnQuery(\n    tableName: TableOrModel,\n    attrNameBefore: string,\n    attrNameAfter: string,\n    attributes: SqliteColumnsDescription,\n  ) {\n    const table = this.extractTableDetails(tableName);\n    const backupTable = this.extractTableDetails(\n      `${table.tableName}_${randomBytes(8).toString('hex')}`,\n      table,\n    );\n    const quotedTableName = this.quoteTable(table);\n    const quotedBackupTableName = this.quoteTable(backupTable);\n\n    const tableAttributes = this.attributesToSQL(attributes);\n    const attributeNamesImport = Object.keys(tableAttributes)\n      .map(attr => {\n        return attrNameAfter === attr\n          ? `${this.quoteIdentifier(attrNameBefore)} AS ${this.quoteIdentifier(attr)}`\n          : this.quoteIdentifier(attr);\n      })\n      .join(', ');\n    const attributeNamesExport = Object.keys(tableAttributes)\n      .map(attr => this.quoteIdentifier(attr))\n      .join(', ');\n\n    return [\n      this.createTableQuery(backupTable, tableAttributes),\n      `INSERT INTO ${quotedBackupTableName} SELECT ${attributeNamesImport} FROM ${quotedTableName};`,\n      `DROP TABLE ${quotedTableName};`,\n      this.createTableQuery(table, tableAttributes),\n      `INSERT INTO ${quotedTableName} SELECT ${attributeNamesExport} FROM ${quotedBackupTableName};`,\n      `DROP TABLE ${quotedBackupTableName};`,\n    ];\n  }\n\n  // SQLite has limited ALTER TABLE capapibilites which requires the below workaround involving recreating tables.\n  // This leads to issues with losing data or losing foreign key references.\n  _replaceTableQuery(\n    tableName: TableOrModel,\n    attributes: SqliteColumnsDescription,\n    createTableSql?: string,\n  ) {\n    const table = this.extractTableDetails(tableName);\n    const backupTable = this.extractTableDetails(\n      `${table.tableName}_${randomBytes(8).toString('hex')}`,\n      table,\n    );\n    const quotedTableName = this.quoteTable(table);\n    const quotedBackupTableName = this.quoteTable(backupTable);\n\n    const tableAttributes = this.attributesToSQL(attributes);\n    const attributeNames = Object.keys(tableAttributes)\n      .map(attr => this.quoteIdentifier(attr))\n      .join(', ');\n\n    const backupTableSql = createTableSql\n      ? `${createTableSql.replace(`CREATE TABLE ${quotedTableName}`, `CREATE TABLE ${quotedBackupTableName}`)};`\n      : this.createTableQuery(backupTable, tableAttributes);\n\n    return [\n      backupTableSql,\n      `INSERT INTO ${quotedBackupTableName} SELECT ${attributeNames} FROM ${quotedTableName};`,\n      `DROP TABLE ${quotedTableName};`,\n      `ALTER TABLE ${quotedBackupTableName} RENAME TO ${quotedTableName};`,\n    ];\n  }\n\n  private escapeTable(tableName: TableOrModel): string {\n    const table = this.extractTableDetails(tableName);\n\n    if (table.schema) {\n      return this.escape(`${table.schema}${table.delimiter}${table.tableName}`);\n    }\n\n    return this.escape(table.tableName);\n  }\n\n  versionQuery() {\n    return 'SELECT sqlite_version() as `version`';\n  }\n\n  tableExistsQuery(tableName: TableOrModel): string {\n    return `SELECT name FROM sqlite_master WHERE type = 'table' AND name = ${this.escapeTable(tableName)}`;\n  }\n\n  /**\n   * Generates an SQL query to check if there are any foreign key violations in the db schema\n   *\n   * @param tableName\n   */\n  foreignKeyCheckQuery(tableName: TableOrModel) {\n    return `PRAGMA foreign_key_check(${this.quoteTable(tableName)});`;\n  }\n\n  setIsolationLevelQuery(isolationLevel: IsolationLevel): string {\n    switch (isolationLevel) {\n      case IsolationLevel.REPEATABLE_READ:\n        throw new Error(\n          `The ${isolationLevel} isolation level is not supported by ${this.dialect.name}.`,\n        );\n      case IsolationLevel.READ_UNCOMMITTED:\n        return 'PRAGMA read_uncommitted = 1';\n      case IsolationLevel.READ_COMMITTED:\n        throw new Error(\n          `The ${isolationLevel} isolation level is not supported by ${this.dialect.name}.`,\n        );\n      case IsolationLevel.SERIALIZABLE:\n        return 'PRAGMA read_uncommitted = 0';\n      default:\n        throw new Error(`Unknown isolation level: ${isolationLevel}`);\n    }\n  }\n\n  startTransactionQuery(options?: StartTransactionQueryOptions): string {\n    if (options) {\n      rejectInvalidOptions(\n        'startTransactionQuery',\n        this.dialect,\n        START_TRANSACTION_QUERY_SUPPORTABLE_OPTIONS,\n        this.dialect.supports.startTransaction,\n        options,\n      );\n    }\n\n    return joinSQLFragments([\n      'BEGIN',\n      // Use the transaction type from the options, or the default transaction type from the dialect\n      options?.transactionType ?? this.sequelize.options.transactionType,\n      'TRANSACTION',\n    ]);\n  }\n\n  bulkDeleteQuery(tableOrModel: TableOrModel, options: BulkDeleteQueryOptions) {\n    const table = this.quoteTable(tableOrModel);\n    const modelDefinition = extractModelDefinition(tableOrModel);\n    const whereOptions = { ...options, model: modelDefinition };\n    const whereFragment = whereOptions.where\n      ? this.whereQuery(whereOptions.where, whereOptions)\n      : '';\n\n    if (whereOptions.limit) {\n      return joinSQLFragments([\n        `DELETE FROM ${table} WHERE rowid IN (`,\n        `SELECT rowid FROM ${table}`,\n        whereFragment,\n        this.#internals.addLimitAndOffset(whereOptions),\n        ')',\n      ]);\n    }\n\n    return joinSQLFragments([`DELETE FROM ${table}`, whereFragment]);\n  }\n\n  /**\n   * Temporary function until we have moved the query generation of addConstraint here.\n   *\n   * @param tableName\n   * @param options\n   */\n  _TEMPORARY_getConstraintSnippet(\n    tableName: TableOrModel,\n    options: GetConstraintSnippetQueryOptions,\n  ): string {\n    return this.#internals.getConstraintSnippet(tableName, options);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
