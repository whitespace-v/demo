"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var query_generator_typescript_internal_exports = {};
__export(query_generator_typescript_internal_exports, {
  SqliteQueryGeneratorTypeScript: () => SqliteQueryGeneratorTypeScript
});
module.exports = __toCommonJS(query_generator_typescript_internal_exports);
var import_core = require("@sequelize/core");
var import_query_generator_typescript = require("@sequelize/core/_non-semver-use-at-your-own-risk_/abstract-dialect/query-generator-typescript.js");
var import_check = require("@sequelize/core/_non-semver-use-at-your-own-risk_/utils/check.js");
var import_join_sql_fragments = require("@sequelize/core/_non-semver-use-at-your-own-risk_/utils/join-sql-fragments.js");
var import_model_utils = require("@sequelize/core/_non-semver-use-at-your-own-risk_/utils/model-utils.js");
var import_object = require("@sequelize/core/_non-semver-use-at-your-own-risk_/utils/object.js");
var import_string = require("@sequelize/core/_non-semver-use-at-your-own-risk_/utils/string.js");
var import_node_crypto = require("node:crypto");
var import_query_generator_internal = require("./query-generator.internal.js");
const REMOVE_INDEX_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set(["ifExists"]);
const TRUNCATE_TABLE_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set([
  "restartIdentity"
]);
class SqliteQueryGeneratorTypeScript extends import_core.AbstractQueryGenerator {
  #internals;
  constructor(dialect, internals = new import_query_generator_internal.SqliteQueryGeneratorInternal(dialect)) {
    super(dialect, internals);
    this.#internals = internals;
  }
  describeTableQuery(tableName) {
    return `PRAGMA TABLE_INFO(${this.quoteTable(tableName)})`;
  }
  describeCreateTableQuery(tableName) {
    return `SELECT sql FROM sqlite_master WHERE tbl_name = ${this.escapeTable(tableName)};`;
  }
  listTablesQuery(options) {
    if (options) {
      (0, import_check.rejectInvalidOptions)(
        "listTablesQuery",
        this.dialect,
        import_query_generator_typescript.LIST_TABLES_QUERY_SUPPORTABLE_OPTIONS,
        import_object.EMPTY_SET,
        options
      );
    }
    return "SELECT name AS `tableName` FROM sqlite_master WHERE type='table' AND name != 'sqlite_sequence'";
  }
  truncateTableQuery(tableName, options) {
    if (options) {
      (0, import_check.rejectInvalidOptions)(
        "truncateTableQuery",
        this.dialect,
        import_query_generator_typescript.TRUNCATE_TABLE_QUERY_SUPPORTABLE_OPTIONS,
        TRUNCATE_TABLE_QUERY_SUPPORTED_OPTIONS,
        options
      );
    }
    const sql = [`DELETE FROM ${this.quoteTable(tableName)}`];
    if (options?.restartIdentity) {
      sql.push(
        `DELETE FROM ${this.quoteTable("sqlite_sequence")} WHERE ${this.quoteIdentifier("name")} = ${this.escapeTable(tableName)}`
      );
    }
    return sql;
  }
  showConstraintsQuery(tableName, _options) {
    return (0, import_join_sql_fragments.joinSQLFragments)([
      "SELECT sql FROM sqlite_master",
      `WHERE tbl_name = ${this.escapeTable(tableName)}`
    ]);
  }
  showIndexesQuery(tableName) {
    return `PRAGMA INDEX_LIST(${this.quoteTable(tableName)})`;
  }
  getToggleForeignKeyChecksQuery(enable) {
    return `PRAGMA foreign_keys = ${enable ? "ON" : "OFF"}`;
  }
  renameColumnQuery(_tableName, _attrNameBefore, _attrNameAfter, _attributes) {
    throw new Error(`renameColumnQuery is not supported in ${this.dialect.name}.`);
  }
  removeColumnQuery(_table, _columnName, _options) {
    throw new Error(`removeColumnQuery is not supported in ${this.dialect.name}.`);
  }
  removeIndexQuery(tableName, indexNameOrAttributes, options) {
    if (options) {
      (0, import_check.rejectInvalidOptions)(
        "removeIndexQuery",
        this.dialect,
        import_query_generator_typescript.REMOVE_INDEX_QUERY_SUPPORTABLE_OPTIONS,
        REMOVE_INDEX_QUERY_SUPPORTED_OPTIONS,
        options
      );
    }
    let indexName;
    if (Array.isArray(indexNameOrAttributes)) {
      const table = this.extractTableDetails(tableName);
      indexName = (0, import_string.generateIndexName)(table, { fields: indexNameOrAttributes });
    } else {
      indexName = indexNameOrAttributes;
    }
    return (0, import_join_sql_fragments.joinSQLFragments)([
      "DROP INDEX",
      options?.ifExists ? "IF EXISTS" : "",
      this.quoteIdentifier(indexName)
    ]);
  }
  // SQLite does not support renaming columns. The following is a workaround.
  _replaceColumnQuery(tableName, attrNameBefore, attrNameAfter, attributes) {
    const table = this.extractTableDetails(tableName);
    const backupTable = this.extractTableDetails(
      `${table.tableName}_${(0, import_node_crypto.randomBytes)(8).toString("hex")}`,
      table
    );
    const quotedTableName = this.quoteTable(table);
    const quotedBackupTableName = this.quoteTable(backupTable);
    const tableAttributes = this.attributesToSQL(attributes);
    const attributeNamesImport = Object.keys(tableAttributes).map((attr) => {
      return attrNameAfter === attr ? `${this.quoteIdentifier(attrNameBefore)} AS ${this.quoteIdentifier(attr)}` : this.quoteIdentifier(attr);
    }).join(", ");
    const attributeNamesExport = Object.keys(tableAttributes).map((attr) => this.quoteIdentifier(attr)).join(", ");
    return [
      this.createTableQuery(backupTable, tableAttributes),
      `INSERT INTO ${quotedBackupTableName} SELECT ${attributeNamesImport} FROM ${quotedTableName};`,
      `DROP TABLE ${quotedTableName};`,
      this.createTableQuery(table, tableAttributes),
      `INSERT INTO ${quotedTableName} SELECT ${attributeNamesExport} FROM ${quotedBackupTableName};`,
      `DROP TABLE ${quotedBackupTableName};`
    ];
  }
  // SQLite has limited ALTER TABLE capapibilites which requires the below workaround involving recreating tables.
  // This leads to issues with losing data or losing foreign key references.
  _replaceTableQuery(tableName, attributes, createTableSql) {
    const table = this.extractTableDetails(tableName);
    const backupTable = this.extractTableDetails(
      `${table.tableName}_${(0, import_node_crypto.randomBytes)(8).toString("hex")}`,
      table
    );
    const quotedTableName = this.quoteTable(table);
    const quotedBackupTableName = this.quoteTable(backupTable);
    const tableAttributes = this.attributesToSQL(attributes);
    const attributeNames = Object.keys(tableAttributes).map((attr) => this.quoteIdentifier(attr)).join(", ");
    const backupTableSql = createTableSql ? `${createTableSql.replace(`CREATE TABLE ${quotedTableName}`, `CREATE TABLE ${quotedBackupTableName}`)};` : this.createTableQuery(backupTable, tableAttributes);
    return [
      backupTableSql,
      `INSERT INTO ${quotedBackupTableName} SELECT ${attributeNames} FROM ${quotedTableName};`,
      `DROP TABLE ${quotedTableName};`,
      `ALTER TABLE ${quotedBackupTableName} RENAME TO ${quotedTableName};`
    ];
  }
  escapeTable(tableName) {
    const table = this.extractTableDetails(tableName);
    if (table.schema) {
      return this.escape(`${table.schema}${table.delimiter}${table.tableName}`);
    }
    return this.escape(table.tableName);
  }
  versionQuery() {
    return "SELECT sqlite_version() as `version`";
  }
  tableExistsQuery(tableName) {
    return `SELECT name FROM sqlite_master WHERE type = 'table' AND name = ${this.escapeTable(tableName)}`;
  }
  /**
   * Generates an SQL query to check if there are any foreign key violations in the db schema
   *
   * @param tableName
   */
  foreignKeyCheckQuery(tableName) {
    return `PRAGMA foreign_key_check(${this.quoteTable(tableName)});`;
  }
  setIsolationLevelQuery(isolationLevel) {
    switch (isolationLevel) {
      case import_core.IsolationLevel.REPEATABLE_READ:
        throw new Error(
          `The ${isolationLevel} isolation level is not supported by ${this.dialect.name}.`
        );
      case import_core.IsolationLevel.READ_UNCOMMITTED:
        return "PRAGMA read_uncommitted = 1";
      case import_core.IsolationLevel.READ_COMMITTED:
        throw new Error(
          `The ${isolationLevel} isolation level is not supported by ${this.dialect.name}.`
        );
      case import_core.IsolationLevel.SERIALIZABLE:
        return "PRAGMA read_uncommitted = 0";
      default:
        throw new Error(`Unknown isolation level: ${isolationLevel}`);
    }
  }
  startTransactionQuery(options) {
    if (options) {
      (0, import_check.rejectInvalidOptions)(
        "startTransactionQuery",
        this.dialect,
        import_query_generator_typescript.START_TRANSACTION_QUERY_SUPPORTABLE_OPTIONS,
        this.dialect.supports.startTransaction,
        options
      );
    }
    return (0, import_join_sql_fragments.joinSQLFragments)([
      "BEGIN",
      // Use the transaction type from the options, or the default transaction type from the dialect
      options?.transactionType ?? this.sequelize.options.transactionType,
      "TRANSACTION"
    ]);
  }
  bulkDeleteQuery(tableOrModel, options) {
    const table = this.quoteTable(tableOrModel);
    const modelDefinition = (0, import_model_utils.extractModelDefinition)(tableOrModel);
    const whereOptions = { ...options, model: modelDefinition };
    const whereFragment = whereOptions.where ? this.whereQuery(whereOptions.where, whereOptions) : "";
    if (whereOptions.limit) {
      return (0, import_join_sql_fragments.joinSQLFragments)([
        `DELETE FROM ${table} WHERE rowid IN (`,
        `SELECT rowid FROM ${table}`,
        whereFragment,
        this.#internals.addLimitAndOffset(whereOptions),
        ")"
      ]);
    }
    return (0, import_join_sql_fragments.joinSQLFragments)([`DELETE FROM ${table}`, whereFragment]);
  }
  /**
   * Temporary function until we have moved the query generation of addConstraint here.
   *
   * @param tableName
   * @param options
   */
  _TEMPORARY_getConstraintSnippet(tableName, options) {
    return this.#internals.getConstraintSnippet(tableName, options);
  }
}
//# sourceMappingURL=query-generator-typescript.internal.js.map
