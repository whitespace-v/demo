import type { BulkDeleteQueryOptions, GetConstraintSnippetQueryOptions, ListTablesQueryOptions, RemoveColumnQueryOptions, RemoveIndexQueryOptions, ShowConstraintsQueryOptions, StartTransactionQueryOptions, TableOrModel, TruncateTableQueryOptions } from '@sequelize/core';
import { AbstractQueryGenerator, IsolationLevel } from '@sequelize/core';
import type { SqliteDialect } from './dialect.js';
import { SqliteQueryGeneratorInternal } from './query-generator.internal.js';
import type { SqliteColumnsDescription } from './query-interface.types.js';
/**
 * Temporary class to ease the TypeScript migration
 */
export declare class SqliteQueryGeneratorTypeScript extends AbstractQueryGenerator {
    #private;
    constructor(dialect: SqliteDialect, internals?: SqliteQueryGeneratorInternal);
    describeTableQuery(tableName: TableOrModel): string;
    describeCreateTableQuery(tableName: TableOrModel): string;
    listTablesQuery(options?: ListTablesQueryOptions): string;
    truncateTableQuery(tableName: TableOrModel, options?: TruncateTableQueryOptions): string[];
    showConstraintsQuery(tableName: TableOrModel, _options?: ShowConstraintsQueryOptions): string;
    showIndexesQuery(tableName: TableOrModel): string;
    getToggleForeignKeyChecksQuery(enable: boolean): string;
    renameColumnQuery(_tableName: TableOrModel, _attrNameBefore: string, _attrNameAfter: string, _attributes: SqliteColumnsDescription): string;
    removeColumnQuery(_table: TableOrModel, _columnName: string, _options?: RemoveColumnQueryOptions): string;
    removeIndexQuery(tableName: TableOrModel, indexNameOrAttributes: string | string[], options?: RemoveIndexQueryOptions): string;
    _replaceColumnQuery(tableName: TableOrModel, attrNameBefore: string, attrNameAfter: string, attributes: SqliteColumnsDescription): string[];
    _replaceTableQuery(tableName: TableOrModel, attributes: SqliteColumnsDescription, createTableSql?: string): string[];
    private escapeTable;
    versionQuery(): string;
    tableExistsQuery(tableName: TableOrModel): string;
    /**
     * Generates an SQL query to check if there are any foreign key violations in the db schema
     *
     * @param tableName
     */
    foreignKeyCheckQuery(tableName: TableOrModel): string;
    setIsolationLevelQuery(isolationLevel: IsolationLevel): string;
    startTransactionQuery(options?: StartTransactionQueryOptions): string;
    bulkDeleteQuery(tableOrModel: TableOrModel, options: BulkDeleteQueryOptions): string;
    /**
     * Temporary function until we have moved the query generation of addConstraint here.
     *
     * @param tableName
     * @param options
     */
    _TEMPORARY_getConstraintSnippet(tableName: TableOrModel, options: GetConstraintSnippetQueryOptions): string;
}
