"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var query_interface_internal_exports = {};
__export(query_interface_internal_exports, {
  SqliteQueryInterfaceInternal: () => SqliteQueryInterfaceInternal
});
module.exports = __toCommonJS(query_interface_internal_exports);
var import_core = require("@sequelize/core");
var import_query_interface_internal = require("@sequelize/core/_non-semver-use-at-your-own-risk_/abstract-dialect/query-interface-internal.js");
var import_sql = require("@sequelize/core/_non-semver-use-at-your-own-risk_/utils/sql.js");
class SqliteQueryInterfaceInternal extends import_query_interface_internal.AbstractQueryInterfaceInternal {
  constructor(dialect) {
    super(dialect);
    this.dialect = dialect;
  }
  get #sequelize() {
    return this.dialect.sequelize;
  }
  get #queryGenerator() {
    return this.dialect.queryGenerator;
  }
  get #queryInterface() {
    return this.dialect.queryInterface;
  }
  /**
   * Alters a table in sqlite.
   * Workaround for sqlite's limited alter table support.
   *
   * @param tableName
   * @param columns
   * @param options
   */
  async alterTableInternal(tableName, columns, options) {
    const table = this.#queryGenerator.extractTableDetails(tableName);
    await (0, import_sql.withSqliteForeignKeysOff)(this.#sequelize, options, async () => {
      await this.#sequelize.transaction(
        {
          nestMode: import_core.TransactionNestMode.savepoint,
          transaction: options?.transaction
        },
        async (transaction) => {
          const indexes = await this.#queryInterface.showIndex(tableName, {
            ...options,
            transaction
          });
          for (const index of indexes) {
            if (!index.name.startsWith("sqlite_autoindex_")) {
              continue;
            }
            if (!index.unique) {
              continue;
            }
            for (const field of index.fields) {
              if (columns[field.attribute]) {
                columns[field.attribute].unique = true;
              }
            }
          }
          const sql = this.#queryGenerator._replaceTableQuery(tableName, columns);
          await this.executeQueriesSequentially(sql, { ...options, transaction, raw: true });
          const foreignKeyCheckResult = await this.#sequelize.queryRaw(
            this.#queryGenerator.foreignKeyCheckQuery(tableName),
            {
              ...options,
              transaction,
              type: import_core.QueryTypes.SELECT
            }
          );
          if (foreignKeyCheckResult.length > 0) {
            throw new import_core.ForeignKeyConstraintError({
              message: `Foreign key violations detected: ${JSON.stringify(foreignKeyCheckResult, null, 2)}`,
              table: table.tableName
            });
          }
          await Promise.all(
            indexes.map(async (index) => {
              if (index.name.startsWith("sqlite_autoindex_")) {
                return;
              }
              return this.#sequelize.queryInterface.addIndex(tableName, {
                ...index,
                type: void 0,
                transaction,
                fields: index.fields.map((field) => field.attribute)
              });
            })
          );
        }
      );
    });
  }
}
//# sourceMappingURL=query-interface.internal.js.map
