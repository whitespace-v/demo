import type { Sequelize } from '@sequelize/core';
import { AbstractDialect } from '@sequelize/core';
import type { Sqlite3Module, SqliteConnectionOptions } from './connection-manager.js';
import { SqliteConnectionManager } from './connection-manager.js';
import { SqliteQueryGenerator } from './query-generator.js';
import { SqliteQueryInterface } from './query-interface.js';
import { SqliteQuery } from './query.js';
export interface SqliteDialectOptions {
    /**
     * If set to false, SQLite will not enforce foreign keys.
     *
     * @default true
     */
    foreignKeys?: boolean;
    /**
     * The sqlite3 library to use.
     * If not provided, the sqlite3 npm library will be used.
     * Must be compatible with the sqlite3 npm library API.
     *
     * Using this option should only be considered as a last resort,
     * as the Sequelize team cannot guarantee its compatibility.
     */
    sqlite3Module?: Sqlite3Module;
}
export declare class SqliteDialect extends AbstractDialect<SqliteDialectOptions, SqliteConnectionOptions> {
    static supports: import("@sequelize/core/_non-semver-use-at-your-own-risk_/abstract-dialect/dialect.js").DialectSupports;
    readonly Query: typeof SqliteQuery;
    readonly connectionManager: SqliteConnectionManager;
    readonly queryGenerator: SqliteQueryGenerator;
    readonly queryInterface: SqliteQueryInterface;
    constructor(sequelize: Sequelize, options: SqliteDialectOptions);
    parseConnectionUrl(): SqliteConnectionOptions;
    createBindCollector(): import("@sequelize/core/_non-semver-use-at-your-own-risk_/abstract-dialect/dialect.js").BindCollector;
    getDefaultSchema(): string;
    static getSupportedOptions(): readonly (keyof SqliteDialectOptions)[];
    static getSupportedConnectionOptions(): readonly string[];
}
