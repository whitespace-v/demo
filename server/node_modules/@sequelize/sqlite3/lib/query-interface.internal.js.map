{
  "version": 3,
  "sources": ["../src/query-interface.internal.ts"],
  "sourcesContent": ["import type { QueryRawOptions, Sequelize, TableOrModel } from '@sequelize/core';\nimport { ForeignKeyConstraintError, QueryTypes, TransactionNestMode } from '@sequelize/core';\nimport { AbstractQueryInterfaceInternal } from '@sequelize/core/_non-semver-use-at-your-own-risk_/abstract-dialect/query-interface-internal.js';\nimport { withSqliteForeignKeysOff } from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/sql.js';\nimport type { SqliteDialect } from './dialect.js';\nimport type { SqliteQueryGenerator } from './query-generator.js';\nimport type { SqliteQueryInterface } from './query-interface.js';\nimport type { SqliteColumnsDescription } from './query-interface.types.js';\n\nexport class SqliteQueryInterfaceInternal extends AbstractQueryInterfaceInternal {\n  constructor(readonly dialect: SqliteDialect) {\n    super(dialect);\n  }\n\n  get #sequelize(): Sequelize {\n    return this.dialect.sequelize;\n  }\n\n  get #queryGenerator(): SqliteQueryGenerator {\n    return this.dialect.queryGenerator;\n  }\n\n  get #queryInterface(): SqliteQueryInterface {\n    return this.dialect.queryInterface;\n  }\n\n  /**\n   * Alters a table in sqlite.\n   * Workaround for sqlite's limited alter table support.\n   *\n   * @param tableName\n   * @param columns\n   * @param options\n   */\n  async alterTableInternal(\n    tableName: TableOrModel,\n    columns: SqliteColumnsDescription,\n    options?: QueryRawOptions,\n  ): Promise<void> {\n    const table = this.#queryGenerator.extractTableDetails(tableName);\n\n    await withSqliteForeignKeysOff(this.#sequelize, options, async () => {\n      await this.#sequelize.transaction(\n        {\n          nestMode: TransactionNestMode.savepoint,\n          transaction: options?.transaction,\n        },\n        async transaction => {\n          const indexes = await this.#queryInterface.showIndex(tableName, {\n            ...options,\n            transaction,\n          });\n\n          for (const index of indexes) {\n            // This index is reserved by SQLite, we can't add it through addIndex and must use \"UNIQUE\" on the column definition instead.\n            if (!index.name.startsWith('sqlite_autoindex_')) {\n              continue;\n            }\n\n            if (!index.unique) {\n              continue;\n            }\n\n            for (const field of index.fields) {\n              if (columns[field.attribute]) {\n                columns[field.attribute].unique = true;\n              }\n            }\n          }\n\n          const sql = this.#queryGenerator._replaceTableQuery(tableName, columns);\n          await this.executeQueriesSequentially(sql, { ...options, transaction, raw: true });\n\n          // Run a foreign keys integrity check\n          const foreignKeyCheckResult = await this.#sequelize.queryRaw(\n            this.#queryGenerator.foreignKeyCheckQuery(tableName),\n            {\n              ...options,\n              transaction,\n              type: QueryTypes.SELECT,\n            },\n          );\n\n          if (foreignKeyCheckResult.length > 0) {\n            // There are foreign key violations, exit\n            throw new ForeignKeyConstraintError({\n              message: `Foreign key violations detected: ${JSON.stringify(foreignKeyCheckResult, null, 2)}`,\n              table: table.tableName,\n            });\n          }\n\n          await Promise.all(\n            indexes.map(async index => {\n              // This index is reserved by SQLite, we can't add it through addIndex and must use \"UNIQUE\" on the column definition instead.\n              if (index.name.startsWith('sqlite_autoindex_')) {\n                return;\n              }\n\n              return this.#sequelize.queryInterface.addIndex(tableName, {\n                ...index,\n                type: undefined,\n                transaction,\n                fields: index.fields.map(field => field.attribute),\n              });\n            }),\n          );\n        },\n      );\n    });\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,kBAA2E;AAC3E,sCAA+C;AAC/C,iBAAyC;AAMlC,MAAM,qCAAqC,+DAA+B;AAAA,EAC/E,YAAqB,SAAwB;AAC3C,UAAM,OAAO;AADM;AAAA,EAErB;AAAA,EAEA,IAAI,aAAwB;AAC1B,WAAO,KAAK,QAAQ;AAAA,EACtB;AAAA,EAEA,IAAI,kBAAwC;AAC1C,WAAO,KAAK,QAAQ;AAAA,EACtB;AAAA,EAEA,IAAI,kBAAwC;AAC1C,WAAO,KAAK,QAAQ;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAM,mBACJ,WACA,SACA,SACe;AACf,UAAM,QAAQ,KAAK,gBAAgB,oBAAoB,SAAS;AAEhE,cAAM,qCAAyB,KAAK,YAAY,SAAS,YAAY;AACnE,YAAM,KAAK,WAAW;AAAA,QACpB;AAAA,UACE,UAAU,gCAAoB;AAAA,UAC9B,aAAa,SAAS;AAAA,QACxB;AAAA,QACA,OAAM,gBAAe;AACnB,gBAAM,UAAU,MAAM,KAAK,gBAAgB,UAAU,WAAW;AAAA,YAC9D,GAAG;AAAA,YACH;AAAA,UACF,CAAC;AAED,qBAAW,SAAS,SAAS;AAE3B,gBAAI,CAAC,MAAM,KAAK,WAAW,mBAAmB,GAAG;AAC/C;AAAA,YACF;AAEA,gBAAI,CAAC,MAAM,QAAQ;AACjB;AAAA,YACF;AAEA,uBAAW,SAAS,MAAM,QAAQ;AAChC,kBAAI,QAAQ,MAAM,SAAS,GAAG;AAC5B,wBAAQ,MAAM,SAAS,EAAE,SAAS;AAAA,cACpC;AAAA,YACF;AAAA,UACF;AAEA,gBAAM,MAAM,KAAK,gBAAgB,mBAAmB,WAAW,OAAO;AACtE,gBAAM,KAAK,2BAA2B,KAAK,EAAE,GAAG,SAAS,aAAa,KAAK,KAAK,CAAC;AAGjF,gBAAM,wBAAwB,MAAM,KAAK,WAAW;AAAA,YAClD,KAAK,gBAAgB,qBAAqB,SAAS;AAAA,YACnD;AAAA,cACE,GAAG;AAAA,cACH;AAAA,cACA,MAAM,uBAAW;AAAA,YACnB;AAAA,UACF;AAEA,cAAI,sBAAsB,SAAS,GAAG;AAEpC,kBAAM,IAAI,sCAA0B;AAAA,cAClC,SAAS,oCAAoC,KAAK,UAAU,uBAAuB,MAAM,CAAC,CAAC;AAAA,cAC3F,OAAO,MAAM;AAAA,YACf,CAAC;AAAA,UACH;AAEA,gBAAM,QAAQ;AAAA,YACZ,QAAQ,IAAI,OAAM,UAAS;AAEzB,kBAAI,MAAM,KAAK,WAAW,mBAAmB,GAAG;AAC9C;AAAA,cACF;AAEA,qBAAO,KAAK,WAAW,eAAe,SAAS,WAAW;AAAA,gBACxD,GAAG;AAAA,gBACH,MAAM;AAAA,gBACN;AAAA,gBACA,QAAQ,MAAM,OAAO,IAAI,WAAS,MAAM,SAAS;AAAA,cACnD,CAAC;AAAA,YACH,CAAC;AAAA,UACH;AAAA,QACF;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AACF;",
  "names": []
}
