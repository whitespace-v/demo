import type { AbstractConnection, ConnectionOptions } from '@sequelize/core';
import { AbstractConnectionManager } from '@sequelize/core';
import * as Sqlite3 from 'sqlite3';
import type { SqliteDialect } from './dialect.js';
export type Sqlite3Module = typeof Sqlite3;
declare const CLOSED_SYMBOL: unique symbol;
export interface SqliteConnection extends AbstractConnection, Sqlite3.Database {
    filename: string;
    [CLOSED_SYMBOL]?: boolean;
}
export interface SqliteConnectionOptions {
    /**
     * Path to the SQLite database file
     *
     * Special values:
     * - ':memory:': to use a temporary in-memory database.
     * - '': to create a temporary disk-based database.
     *
     * Note: temporary databases require the pool to have the following configuration:
     * - max size: 1
     * - idle timeout: Infinity
     * - max uses per resource: Infinity
     *
     * @default 'sequelize.sqlite' in your current working directory
     */
    storage?: string;
    /**
     * The mode to open the database connection with.
     *
     * An integer flag that can be a combination of the following values:
     * - OPEN_CREATE
     * - OPEN_READONLY
     * - OPEN_READWRITE
     * - OPEN_SHAREDCACHE
     * - OPEN_PRIVATECACHE
     * - OPEN_FULLMUTEX
     * - OPEN_URI
     *
     * This package exports each of these values
     *
     * @example
     * ```ts
     * import { SqliteDialect, OPEN_CREATE, OPEN_READWRITE } from '@sequelize/sqlite3';
     *
     * new Sequelize({
     *   dialect: SqliteDialect,
     *   storage: 'db.sqlite',
     *   mode: OPEN_CREATE | OPEN_READWRITE,
     * });
     * ```
     */
    mode?: number;
    /**
     * The "PRAGMA KEY" password to use for the connection.
     */
    password?: string;
}
export { OPEN_CREATE, OPEN_FULLMUTEX, OPEN_PRIVATECACHE, OPEN_READONLY, OPEN_READWRITE, OPEN_SHAREDCACHE, OPEN_URI, } from 'sqlite3';
export declare class SqliteConnectionManager extends AbstractConnectionManager<SqliteDialect, SqliteConnection> {
    #private;
    constructor(dialect: SqliteDialect);
    connect(options: ConnectionOptions<SqliteDialect>): Promise<SqliteConnection>;
    validate(connection: SqliteConnection): boolean;
    disconnect(connection: SqliteConnection): Promise<void>;
}
